#include <avr/interrupt.h>
#include <avr/io.h>
#include <util/delay.h>
#include <inttypes.h>
#include <stdio.h>
#include <math.h>
#include <Servo.h>
#include "Wire.h"
#include <MPU6050_light.h>

//US
#define trigPin 11  //US trigger on PB3
#define echoPin 2  //US echo on PD2

//mpu
#define YAW_THRESHOLD 90.0
#define SERVO_MIN_ANGLE 0
#define SERVO_MAX_ANGLE 180


//servo
Servo myservo;
int servoAngle=90;

//lift fan
const int Lfan = 5; //p3 

//thrust fan
const int Tfan = 6; //p4


//MPU global variables
MPU6050 mpu(Wire);
unsigned long timer = 0;
float yaw;

// Constants
const float ACCELERATION_THRESHOLD = 0.1;  // Adjust as needed
const int STOPPED_DURATION = 2000;         // Time in milliseconds to consider it stopped

// Variables
unsigned long stopStartTime = 0;
bool hcStop =false;


//US global variables
long duration;
double distance;


void setup() {
  
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(Lfan, OUTPUT);
  pinMode(Tfan, OUTPUT);

  Serial.begin(9600);
  Wire.begin();
  myservo.attach(9);

  byte status = mpu.begin();
  Serial.print(F("MPU6050 status: "));
  Serial.println(status);
  while (status != 0) { } // Stop if could not connect to MPU6050

  Serial.println(F("Calculating offsets, do not move MPU6050"));
  _delay_ms(1000);
  mpu.calcOffsets(true, true); // Gyro and accelerometer
  Serial.println("Done!\n");
  myservo.write(servoAngle);




}


void loop(){

  mpu.update();

  myservo.write(servoAngle);
  
  delay(1000);
  
  
  digitalWrite(Lfan,HIGH);
  delay(2000);  //enough time to turn on

  digitalWrite(Tfan,HIGH);
  
  


  

}




void turnHC(){



  
}










